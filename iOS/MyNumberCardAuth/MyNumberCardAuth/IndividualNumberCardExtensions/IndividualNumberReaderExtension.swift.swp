//
//  IndividualNumberReaderExtension.swift
//  
//
//  Created by c3lab on 2023/09/04.
//

import Foundation

#if os(iOS)
import CoreNFC
#if canImport(TRETJapanNFCReader_Core)
import TRETJapanNFCReader_Core
#endif
#if canImport(TRETJapanNFCReader_MIFARE)
import TRETJapanNFCReader_MIFARE
#endif

/// マイナンバーカードのデータ
public struct IndividualMyNumberCardData {
    /// 利用者証明用電子証明書
    public var digitalCertificateForUserVerification: [UInt8]?
    /// 利用者証明用電子署名
    public var digitalSignatureForUserVerification: [UInt8]?
}

public enum IndividualNumberCardExecuteType: CaseIterable {
    ///　電子署名生成
    case computeDigitalSignature
}

@available(iOS 13.0, *)
public class IndividualNumberReaderExtension : IndividualNumberReader {
    private var executeTypeSignature:Bool = false
    private var individualNumberCardExecuteType: IndividualNumberCardExecuteType?
    private var items: [IndividualNumberCardItem] = []
    private var cardInfoInputSupportAppPIN: [UInt8] = []
    private var userAuthenticationPIN: [UInt8] = []
    private var dataToSign: [UInt8] = []
    private var lookupRemainingPINType: IndividualNumberCardPINType?
    
    /// マイナンバーカードで利用者証明用電子署名を生成する
    /// - Parameters:
    ///   - userAuthenticationPIN: 利用者証明用秘密鍵用暗証番号
    ///   - dataToSign: 署名対象データ
    public func computeDigitalSignatureForUserAuthentication(userAuthenticationPIN: String = "",dataToSign: [UInt8]) {
        self.executeTypeSignature = false;
        self.individualNumberCardExecuteType = .computeDigitalSignature
        if let userAuthenticationPIN = userAuthenticationPIN.data(using: .utf8){
            self.userAuthenticationPIN = [UInt8](userAuthenticationPIN)
        }
        self.dataToSign = dataToSign
        self.beginScanning()
    }
    
    /// マイナンバーカードで署名用電子署名を生成する
    /// - Parameters:
    ///   - SignaturePIN: 署名用秘密鍵用暗証番号
    ///   - dataToSign: 署名対象データ
    public func computeDigitalSignatureForSignature(SignaturePIN: String = "",dataToSign: [UInt8]) {
        self.executeTypeSignature = true;
        self.individualNumberCardExecuteType = .computeDigitalSignature
        if let userAuthenticationPIN = SignaturePIN.data(using: .utf8){
            self.userAuthenticationPIN = [UInt8](userAuthenticationPIN)
        }
        self.dataToSign = dataToSign
        self.beginScanning()
    }
    
    private func beginScanning() {
        guard self.checkReadingAvailable() else {
            print("""
                ------------------------------------------------------------
                【マイナンバーカードを読み取るには】
                マイナンバーカードを読み取るには、開発している iOS Application の Info.plist に "ISO7816 application identifiers for NFC Tag Reader Session (com.apple.developer.nfc.readersession.iso7816.select-identifiers)" を追加します。ISO7816 application identifiers for NFC Tag Reader Session には以下を含める必要があります。
                \t• Item 0: D392F000260100000001
                \t• Item 1: D3921000310001010408
                \t• Item 2: D3921000310001010100
                \t• Item 3: D3921000310001010401
                ------------------------------------------------------------
            """)
            return
        }
        
        self.session = NFCTagReaderSession(pollingOption: .iso14443, delegate: self)
        self.session?.alertMessage = Localized.nfcReaderSessionAlertMessage.string()
        self.session?.begin()
    }
    
    public override func tagReaderSession(_ session: NFCTagReaderSession, didDetect tags: [NFCTag]) {
        if tags.count > 1 {
            let retryInterval = DispatchTimeInterval.milliseconds(1000)
            let alertedMessage = session.alertMessage
            session.alertMessage = Localized.nfcTagReaderSessionDidDetectTagsMoreThan1TagIsDetectedMessage.string()
            DispatchQueue.global().asyncAfter(deadline: .now() + retryInterval, execute: {
                session.restartPolling()
                session.alertMessage = alertedMessage
            })
            return
        }
        
        let tag = tags.first!
        
        session.connect(to: tag) { (error) in
            if nil != error {
                session.invalidate(errorMessage: Localized.nfcTagReaderSessionConnectErrorMessage.string())
                return
            }
            
            guard case NFCTag.iso7816(let individualNumberCardTag) = tag else {
                let retryInterval = DispatchTimeInterval.milliseconds(1000)
                let alertedMessage = session.alertMessage
                session.alertMessage = Localized.nfcTagReaderSessionDifferentTagTypeErrorMessage.string()
                DispatchQueue.global().asyncAfter(deadline: .now() + retryInterval, execute: {
                    session.restartPolling()
                    session.alertMessage = alertedMessage
                })
                return
            }
            
            switch individualNumberCardTag.initialSelectedAID {
            case "D392F000260100000001", "D3921000310001010408", "D3921000310001010100", "D3921000310001010401":
                break
            default:
                let retryInterval = DispatchTimeInterval.milliseconds(1000)
                let alertedMessage = session.alertMessage
                session.alertMessage = Localized.nfcTagReaderSessionDifferentTagTypeErrorMessage.string()
                DispatchQueue.global().asyncAfter(deadline: .now() + retryInterval, execute: {
                    session.restartPolling()
                    session.alertMessage = alertedMessage
                })
                return
            }
            
            session.alertMessage = Localized.nfcTagReaderSessionReadingMessage.string()
            
            let individualNumberCard = IndividualNumberCard(tag: individualNumberCardTag, data: IndividualNumberCardData())
            
            self.executeWithADPUFunction(session, individualNumberCardTag, individualNumberCard) { (individualNumberCard) in
                session.alertMessage = Localized.nfcTagReaderSessionDoneMessage.string()
                session.invalidate()
                
                self.delegate?.individualNumberReaderSession(didRead: individualNumberCard.data)
            }
        }
    }
    
    private func executeWithADPUFunction(_ session: NFCTagReaderSession,_ individualNumberCardTag: NFCISO7816Tag, _ individualNumberCard: IndividualNumberCard, completion: @escaping (IndividualNumberCard) -> Void){
        var individualNumberCard = individualNumberCard
        DispatchQueue(label: "TRETJPNRIndividualNumberReader", qos: .default).async {
            switch self.individualNumberCardExecuteType {
            case .computeDigitalSignature:
                if(self.executeTypeSignature == false) {
                    individualNumberCard = self.getDigitalCertificateForUserVerification(session, individualNumberCard)
                    individualNumberCard = self.computeDigitalSignatureForUserAuthentication(session, individualNumberCard, userAuthenticationPIN: self.userAuthenticationPIN, dataToSign: self.dataToSign)
                } else {
                    individualNumberCard = self.getDigitalCertificateForSignature(session, individualNumberCard, userAuthenticationPIN:self.userAuthenticationPIN)
                    individualNumberCard = self.computeDigitalSignatureForSignature(session, individualNumberCard, userAuthenticationPIN: self.userAuthenticationPIN, dataToSign: self.dataToSign)
                }
            case .none:
                break
            }
            completion(individualNumberCard)
        }
    }
}
#endif
